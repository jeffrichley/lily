---
alwaysApply: true
---
## Using Commitizen (Recommended)

### Interactive Mode (For Manual Commits)
```bash
# Use this when making commits manually:
uv run git cz
# Then answer the prompts for type, scope, description, etc.
```

### Manual Mode (For Automation - Used by "stuffit")
```bash
# Used by automated workflows like "stuffit":
uv run git commit -m "feat: Add new feature"
# Format is still enforced by pre-commit hooks
```

### Version Management
```bash
# Bump version manually
uv run cz bump

# Or let Commitizen handle it automatically:
# feat: commits → minor version bump (0.1.0 → 0.2.0)
# fix: commits → patch version bump (0.1.0 → 0.1.1)
# docs/style/refactor/test/chore/ci/build: no version bump
```

---

## Commit Message Requirements

**REQUIRED: Use conventional commit format** - this is enforced by pre-commit hooks:

```bash
# ❌ This will FAIL - missing conventional commit format:
uv run git commit -m "Add agent factory"

# ✅ This will PASS - proper conventional commit format:
uv run git commit -m "feat: Add agent factory with automatic namespace support

- Add AgentFactory.create_agent() method with optional resolver
- Implement automatic 'agent:' prefix for agent tools
- Add comprehensive test coverage for agent integration
- Update config to use agent key as agent name
- Support both sync and async agent creation
- Add validation for agent configuration parameters"
```

**Required Commit Message Structure:**
```
type(scope): brief description

- Detailed bullet point 1
- Detailed bullet point 2
- Detailed bullet point 3
- Any important notes or breaking changes
```

**Required Types:** `feat`, `fix`, `docs`, `style`, `refactor`, `test`, `chore`, `perf`, `ci`, `build`

**Note:** Pre-commit hooks will reject commits that don't follow this format.

---

## Feature Branch Workflow

### Create and Switch to Feature Branch
```bash
uv run git checkout -b feature/agent-factory
```

### Work on Feature
```bash
uv run git add .
uv run git cz  # Use interactive mode for better commits
```

### Push Feature Branch
```bash
uv run git push -u origin feature/agent-factory
```

### Merge to Main (after review)
```bash
uv run git checkout main
uv run git pull origin main
uv run git merge feature/agent-factory
uv run git push origin main
```

---

## Troubleshooting

### Fix Corrupted Coverage Files
```bash
rm -f .coverage*
uv run git add .
uv run git commit -m "fix: Clean up corrupted coverage files"
```

### Undo Last Commit
```bash
# Keep changes
uv run git reset --soft HEAD~1

# Discard changes
uv run git reset --hard HEAD~1
```

### Check Status
```bash
# Commit history
uv run git log --oneline -10

# Remote branches
uv run git branch -r

# Remote status
uv run git remote -v
```

### Stage and Check Changes
```bash
# Stage all changes
uv run git add .

# Or stage specific files/directories
uv run git add filename.py
uv run git add src/lily/

# Verify staged changes
uv run git status
uv run git diff --cached
```

---

## Common Patterns

### Atomic Commits
```bash
# Stage related changes together
uv run git add src/lily/core/agent_factory.py
uv run git cz  # Choose feat: Add agent registration

uv run git add tests/lily/test_agent_factory.py
uv run git cz  # Choose test: Add agent factory tests
```

### Pull Latest Changes
```bash
uv run git pull origin main
```

---

## Integration with Makefile

Use these Makefile targets for quality checks:

```bash
# Run all checks
uv run make checkit

# Format and lint
uv run make format

# Run tests
uv run make test

# Check coverage (fails if below 80%)
uv run make test-cov-check
```
